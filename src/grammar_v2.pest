WHITESPACE = _{ " " | "\t" | NEWLINE }
KEYWORD = @{ 
  "abstract" | 
  "end" |
  "primitive" |
  "type" 
}
alpha = { 'a'..'z' | 'A'..'Z' }
alpha_num = { 'a'..'z' | 'A'..'Z' | '0'..'9' }
Identifier = @{ !KEYWORD ~ (alpha | "_") ~ alpha_num* }

Program = _{ 
  SOI ~ 
  Exprs ~ 
  EOI 
}

Program_other = _{ SOI ~ "\n"* ~ (Expr ~ "\n"+) * ~ Expr? ~ EOI }

Exprs = _{ (Expr ~ NEWLINE*)+ }

Expr = { 
  AbstractType | 
  PrimitiveType |
  Function |
  Float |
  Int |
  AssignmentExpr |
  BinaryExpr |
  MethodCall
  //UnaryExpr
}

// different code block types
AbstractType = { "abstract type" ~ Identifier ~ Generics? ~ SubType? ~ "end" }
PrimitiveType = { "primitive type" ~ Identifier ~ PrimitiveSubType? ~ PrimitiveBits ~ "end" }
Function = { "function" ~ Identifier ~ Generics? ~ FunctionArgs? ~ FunctionExprs ~ "end" }
MethodCall = { Identifier ~ FunctionArgs }

// common parsing stuff
Generics = { "{" ~ Parameter* ~ "}" }
Parameter = { Identifier ~ SubType? ~ ","? }
SubType = { WHITESPACE* ~ "<:" ~ WHITESPACE* ~ Identifier ~ Generics? }
PrimitiveBits = @{ ASCII_DIGIT* }
PrimitiveSubType = { WHITESPACE* ~ "<:" ~ WHITESPACE* ~ Identifier }
FunctionArgs = { "(" ~ FunctionArg* ~ ")" }
FunctionArg = { Identifier ~ "," ? }
FunctionExprs = { FunctionExpr* }
FunctionExpr = {
  AssignmentExpr |
  BinaryExpr |
  MethodCall |
  Identifier
}


// expression
BinaryExpr = { (Identifier | Primitive) ~ BinaryOperator ~ (Identifier | Primitive) }
//UnaryExpr = { UnaryOperator ~ (Identifier | Primitive) }

AssignmentExpr = { Identifier ~ "=" ~ (BinaryExpr | MethodCall | Identifier | Primitive) }

// operators
BinaryOperator = {
  "-" |
  "+" |
  "*" |
  "/" |
  "^" |
  "%"
}
UnaryOperator = {
  "-" |
  "+"
}

Operator = {
  BinaryOperator |
  UnaryOperator
}

// primitive type defaults
Int = @{
  "-"? ~
  ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
}
Float = @{
  "-"? ~
  ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~
  ("." ~ ASCII_DIGIT*) ~
  (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}
Primitive = {
  Float |
  Int
}

// basic stuff
//SingleLineComment = { "#" ~ (!NEWLINE ~ ANY)* }
//SingleLineComment = { "#" ~ ANY* ~ !NEWLINE* }
