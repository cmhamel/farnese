//WHITESPACE = _{ " " | "\t" | NEWLINE }
WHITESPACE = _{ " " | "\t" }

KEYWORD = _{ 
  "abstract type" | 
  "end" |
  "function" |
  "import" |
  "module" |
  "primitive type" |
  "struct" |
  "using"
}
alpha = { 'a'..'z' | 'A'..'Z' }
alpha_num = { 'a'..'z' | 'A'..'Z' | '0'..'9' }

//Identifier = @{ !KEYWORD ~ (alpha | "_") ~ alpha_num* }

RawIdentifier = @{ (alpha | "_") ~ alpha_num* }
Identifier = @{ !KEYWORD ~ RawIdentifier }

Program = _{ 
  SOI ~ 
  Exprs ~ 
  EOI 
}

Program_other = _{ SOI ~ "\n"* ~ (Expr ~ "\n"+) * ~ Expr? ~ EOI }

Exprs = _{ (Expr ~ NEWLINE*)+ }

Expr = { 
  Comment |
  //MainFunction |
  Module |
  StructType |
  ImportExpr |
  UsingExpr |
  UnaryExpr |
  AbstractType | 
  PrimitiveType |
  Function |
  BinaryExpr |
  Float |
  Int |
  AssignmentExpr |
  //BinaryExpr |
  MethodCall
}

// different code block types
//MainFunction = { "function main()" ~ Exprs ~ "end" }
Module = { "module" ~ Identifier ~ (Expr | NEWLINE)* ~ "end" }
ImportExpr = { "import" ~ Identifier ~ "." ~ Identifier ~ NEWLINE }
UsingExpr = { "using" ~ Identifier ~ NEWLINE }
AbstractType = { "abstract type" ~ Identifier ~ Generics? ~ SuperType? ~ "end" }
PrimitiveType = { "primitive type" ~ Identifier ~ PrimitiveSuperType? ~ PrimitiveBits ~ "end" }
Function = { "function" ~ Identifier ~ Generics? ~ FunctionArgs? ~ FunctionReturnType? ~ FunctionExprs ~ "end" }
MethodCall = { Identifier ~ FunctionArgs }

// typedef stuff
StructType = { "struct" ~ Identifier ~ Generics? ~ SuperType? ~ (StructField | NEWLINE)* ~ "end" }
StructField = { Identifier ~ ("::" ~ Identifier ~ Generics?)? }

// common parsing stuff
Generics = { "{" ~ Generic* ~ "}" }
Generic = { Identifier ~ SuperType? ~ ","? }
SuperType = { WHITESPACE* ~ "<:" ~ WHITESPACE* ~ Identifier ~ Generics? }
PrimitiveBits = @{ ASCII_DIGIT* }
PrimitiveSuperType = { WHITESPACE* ~ "<:" ~ WHITESPACE* ~ Identifier }
FunctionArgs = { "(" ~ FunctionArg* ~ ")" }
//FunctionArg = { Identifier ~ "," ? }
FunctionArg = { (Identifier ~ ("::" ~ Identifier ~ Generics?)?) ~ "," ? }
FunctionExprs = { FunctionExpr* }
FunctionExpr = {
  Comment |
  AssignmentExpr |
  BinaryExpr |
  UnaryExpr |
  MethodCall |
  Identifier |
  NEWLINE
}
FunctionReturnType = { "::" ~ Identifier }

// expression
ExprTerm = _{ 
  ParenthesesExpr |
  Primitive |
  Identifier |
  //BinaryExpr |
  UnaryExpr
  //"(" ~ (Primitive | Identifier | BinaryExpr) ~ ")" 
}
BinaryExpr = { ExprTerm ~ BinaryOperator ~ ExprTerm }
UnaryExpr = { UnaryOperator ~ ExprTerm }
//BinaryExpr = { (Identifier | Primitive) ~ BinaryOperator ~ (Identifier | Primitive) }
//UnaryExpr = { UnaryOperator ~ (Identifier | Primitive) }
//ParenthesesExpr = { "(" ~ (Primitive | Identifier | BinaryExpr | UnaryExpr) ~ ")" }
ParenthesesExpr = { "(" ~ (BinaryExpr | ExprTerm) ~ ")" }

AssignmentExpr = { Identifier ~ "=" ~ (ParenthesesExpr | BinaryExpr | MethodCall | Identifier | Primitive | UnaryExpr) }
//AssignmentExpr = { Identifier ~ "=" ~ ExprTerm }
//AssignmentExpr = { Identifier ~ "=" ~ (Primitive | ParenthesesExpr | BinaryExpr | MethodCall | Identifier | UnaryExpr) }



// operators
BinaryOperator = {
  "-" |
  "+" |
  "*" |
  "/" |
  "^" |
  "%"
}
UnaryOperator = {
  "-" |
  "+"
}

Operator = {
  UnaryOperator |
  BinaryOperator
}

// primitive type defaults
Char = @{
  "'" ~ ASCII_ALPHANUMERIC ~ "'"
}
Int = @{
  "-"? ~
  ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
}
Float = @{
  "-"? ~
  ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~
  ("." ~ ASCII_DIGIT*) ~
  (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}
Primitive = {
  Char |
  Float |
  Int
}

// basic stuff
Comment = { BlockComment | SingleLineComment }
BlockComment = { StartBlock ~ (BlockContent | BlockComment)* ~ EndBlock }
StartBlock = { "\"\"\"" }
EndBlock = { "\"\"\"" }
BlockContent = { (!StartBlock ~ !EndBlock ~ ANY)+ }
SingleLineComment = { "#" ~ (!NEWLINE ~ ANY)* ~ NEWLINE? }
